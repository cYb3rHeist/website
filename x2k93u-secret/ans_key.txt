## **1. Nmap (Network Mapper)**
Nmap is used for network discovery and enumeration.

### **Basic Commands**
- **Scan open ports:**
  ```bash
  nmap -p- <target-ip>
  ```
  Scans all 65,535 ports on the target.

- **Scan with service detection:**
  ```bash
  nmap -sV -sC <target-ip>
  ```
  - `-sV`: Detects service versions (e.g., Apache, MySQL).
  - `-sC`: Runs default scripts for more information.

- **Scan and output results to a file:**
  ```bash
  nmap -oN output.txt <target-ip>
  ```
  Saves the scan results to a file named `output.txt`.

---

## **2. Gobuster (Directory and File Enumeration)**
Gobuster helps find hidden directories and files on a web server.

### **Basic Commands**
- **Directory brute-forcing:**
  ```bash
  gobuster dir -u http://<target-ip> -w /usr/share/wordlists/dirb/common.txt
  ```
  - `-u`: Target URL.
  - `-w`: Wordlist to use (common.txt is often a good starting point).

- **Include extensions:**
  ```bash
  gobuster dir -u http://<target-ip> -w /usr/share/wordlists/dirb/common.txt -x php,txt,html
  ```
  Adds extensions to look for specific file types like `.php` or `.txt`.

---

## **3. Sqlmap (Automated SQL Injection)**
Sqlmap automates SQL injection attacks to extract data from databases.

### **Basic Commands**
- **Test a URL for SQL injection:**
  ```bash
  sqlmap -u "http://<target-ip>/vulnerable?param=value" --batch
  ```
  - `-u`: URL to test.
  - `--batch`: Automatically answers questions (useful in CTFs).

- **Get database names:**
  ```bash
  sqlmap -u "http://<target-ip>/vulnerable?param=value" --dbs
  ```

- **Dump data from a specific database:**
  ```bash
  sqlmap -u "http://<target-ip>/vulnerable?param=value" -D <database-name> --dump
  ```
  - `-D`: Target database name.
  - `--dump`: Extracts data.

---

## **4. Burp Suite (Web Application Testing)**
Burp Suite is a proxy tool for intercepting and modifying HTTP requests.

### **Key Features**
- **Intercept HTTP Requests:** Use Burp Proxy to capture and modify web traffic.
- **Repeater:** Replay and modify HTTP requests to test for vulnerabilities.
- **Decoder:** Decode/encode Base64, URL-encoded, and other formats.

---

## **5. CyberChef (Online Decoding and Encoding)**
CyberChef is a versatile tool for cryptography challenges.

### **Use Cases**
- **Base64 Decoding:**
  - Paste the Base64-encoded string into CyberChef and apply the "From Base64" operation.
  
- **ROT13 Decoding:**
  - Use the "ROT13" operation to decode text encoded with ROT13.

- **Hex to Text:**
  - Use the "From Hex" operation.

---

## **6. Netcat (nc)**
Netcat is a simple networking tool for sending and receiving data.

### **Basic Commands**
- **Check open ports manually:**
  ```bash
  nc -zv <target-ip> <port-range>
  ```
  - `-z`: Scan mode.
  - `-v`: Verbose output.

- **Connect to an open port:**
  ```bash
  nc <target-ip> <port>
  ```

---

## **7. Strings (Binary Data Analysis)**
Strings extracts readable text from binary files.

### **Basic Commands**
- **Extract strings from a file:**
  ```bash
  strings <file>
  ```
  - Useful for finding hidden hints or flags in binary files.

---

## **8. Steghide (Steganography)**
Steghide is used for extracting hidden data from images or files.

### **Basic Commands**
- **Extract data from an image:**
  ```bash
  steghide extract -sf <image-file>
  ```
  - `-sf`: Specifies the file containing hidden data.
  - Will prompt for a password if one is set.

---

## **9. Hashcat (Password Cracking)**
Hashcat is used for cracking password hashes.

### **Basic Commands**
- **Crack a hash with a wordlist:**
  ```bash
  hashcat -m 0 -a 0 <hash-file> /usr/share/wordlists/rockyou.txt
  ```
  - `-m 0`: MD5 hash type.
  - `-a 0`: Straight mode (dictionary attack).

---

## **10. Python for Quick Scripting**
Python is a powerful tool for solving small CTF challenges.

### **Useful Scripts**
- **ROT13 Decoder:**
  ```python
  import codecs
  print(codecs.encode('text', 'rot_13'))
  ```
- **Base64 Decoder:**
  ```python
  import base64
  print(base64.b64decode('SGVsbG8gd29ybGQ=').decode('utf-8'))
  ```

---

### **Workflow Summary**
1. **Start with Nmap** to discover open ports and running services.
2. **Use Gobuster** to find directories or files on web servers.
3. **Test web input fields** with manual payloads or tools like Sqlmap.
4. **Decode cryptographic challenges** using CyberChef or Python scripts.
5. **Use Burp Suite** to intercept and analyze HTTP requests.

Would you like me to help set up these tools or provide a more detailed walkthrough of one?




Hereâ€™s a structured and categorized step-by-step guide to finding flags for each team (Red, Blue, and Purple), organized by difficulty level. Follow these workflows during the CTF.

---

## **Red Teaming Flags**

### **Entry-Level**
#### **1. Service Enumeration**
- **Objective:** Identify an open port (e.g., SSH on port 22) and capture the banner flag.
- **Steps:**
  1. Use **Nmap** to scan for open ports:
     ```bash
     nmap -sV -p 22 <target-ip>
     ```
  2. Capture the service banner (e.g., SSH version or custom message).
     ```bash
     nc <target-ip> 22
     ```
  3. Look for a flag in the banner output.

---

### **Easy**
#### **2. Directory Enumeration**
- **Objective:** Find a hidden directory (e.g., `/admin` or `/secret`).
- **Steps:**
  1. Use **Gobuster** to enumerate directories:
     ```bash
     gobuster dir -u http://<target-ip> -w /usr/share/wordlists/dirb/common.txt
     ```
  2. Access discovered directories in your browser or with `curl`:
     ```bash
     curl http://<target-ip>/admin
     ```
  3. Look for flags in files or page content.

---

### **Intermediate**
#### **3. Exploit a Web Input Field**
- **Objective:** Find a vulnerable parameter (e.g., SQL injection).
- **Steps:**
  1. Use a web browser or Burp Suite to inspect input fields (e.g., login forms).
  2. Test for SQL injection manually:
     - Input `' OR '1'='1` in login fields.
  3. Automate testing with **Sqlmap**:
     ```bash
     sqlmap -u "http://<target-ip>/vulnerable?param=value" --dump
     ```
  4. Extract a flag from the database.

---

### **Skilled**
#### **4. Misconfigured Permissions**
- **Objective:** Identify an SUID binary and escalate privileges.
- **Steps:**
  1. Find SUID binaries:
     ```bash
     find / -perm -4000 2>/dev/null
     ```
  2. Analyze binaries for privilege escalation opportunities.
  3. Use escalated privileges to access the flag:
     ```bash
     ./<binary> cat /root/flag.txt
     ```

#### **5. Steganography**
- **Objective:** Extract a hidden message from an image file.
- **Steps:**
  1. Use **Steghide** to extract hidden data:
     ```bash
     steghide extract -sf <image-file>
     ```
  2. If a password is required, use wordlists to brute force it:
     ```bash
     steghide extract -sf <image-file> -p <password>
     ```
  3. Look for the flag in the extracted file.

---

## **Blue Teaming Flags**

### **Entry-Level**
#### **1. Log Analysis**
- **Objective:** Analyze logs for suspicious activity.
- **Steps:**
  1. View logs in `/var/log` (e.g., `auth.log`):
     ```bash
     cat /var/log/auth.log | grep "Failed password"
     ```
  2. Identify unauthorized login attempts and extract the flag.

---

### **Easy**
#### **2. PCAP Analysis**
- **Objective:** Examine a PCAP file for sensitive data.
- **Steps:**
  1. Open the PCAP file in **Wireshark**.
  2. Filter HTTP POST requests:
     ```
     http.request.method == "POST"
     ```
  3. Extract sensitive data (e.g., credentials or flags).

---

### **Intermediate**
#### **3. Configuration Files**
- **Objective:** Spot a misconfigured firewall or service revealing a flag.
- **Steps:**
  1. Look at firewall or service config files (e.g., `iptables` rules):
     ```bash
     sudo iptables -L -v
     ```
  2. Identify rules or open ports that shouldn't exist.
  3. The misconfiguration should lead you to the flag.

---

### **Skilled**
#### **4. Detect Hidden Malware**
- **Objective:** Identify malicious scripts or binaries.
- **Steps:**
  1. Search for suspicious files:
     ```bash
     find / -name "*.sh" -o -name "*.exe" -o -name "*.bin"
     ```
  2. Use `strings` or `cat` to analyze them:
     ```bash
     strings <file>
     ```
  3. Look for flagged strings or commands.

#### **5. Cryptographic Decoding**
- **Objective:** Decode an encoded flag.
- **Steps:**
  1. If encoded in Base64:
     ```bash
     echo "SGVsbG8gd29ybGQ=" | base64 -d
     ```
  2. If encoded with ROT13:
     ```bash
     echo "uryyb" | tr 'A-Za-z' 'N-ZA-Mn-za-m'
     ```

---

## **Purple Teaming Flags**

### **Entry-Level**
#### **1. Simulated Attack Detection**
- **Objective:** Identify artifacts of a simulated attack.
- **Steps:**
  1. Search `auth.log` or `syslog` for SSH brute-force attempts:
     ```bash
     grep "sshd" /var/log/auth.log
     ```
  2. Look for IP addresses and extract the flag from logs.

---

### **Easy**
#### **2. Firewall Rules**
- **Objective:** Analyze rules for intentionally left-open ports.
- **Steps:**
  1. Check firewall rules:
     ```bash
     sudo iptables -L -v
     ```
  2. Identify any open ports not normally allowed and extract the flag.

---

### **Intermediate**
#### **3. Privilege Escalation via Vulnerabilities**
- **Objective:** Exploit a CVE in a web service.
- **Steps:**
  1. Enumerate service versions with **Nmap**:
     ```bash
     nmap -sV <target-ip>
     ```
  2. Search for vulnerabilities:
     - Use `searchsploit`:
       ```bash
       searchsploit <service>
       ```
  3. Exploit the vulnerability and extract the flag.

---

### **Skilled**
#### **4. Reverse Engineering**
- **Objective:** Analyze a binary to find a hardcoded flag.
- **Steps:**
  1. Use **strings** or **Ghidra** to analyze the binary:
     ```bash
     strings <binary>
     ```
  2. Locate the hardcoded flag.

#### **5. Data Leak Identification**
- **Objective:** Extract a flag from a DNS query or email header.
- **Steps:**
  1. Use Wireshark to filter DNS traffic:
     ```
     dns
     ```
  2. Analyze queries for suspicious domains or flags.

---

Let me know if youâ€™d like further details about any specific flag or step!
