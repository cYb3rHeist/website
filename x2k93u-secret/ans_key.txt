## **1. Nmap (Network Mapper)**
Nmap is used for network discovery and enumeration.

### **Basic Commands**
- **Scan open ports:**
  ```bash
  nmap -p- <target-ip>
  ```
  Scans all 65,535 ports on the target.

- **Scan with service detection:**
  ```bash
  nmap -sV -sC <target-ip>
  ```
  - `-sV`: Detects service versions (e.g., Apache, MySQL).
  - `-sC`: Runs default scripts for more information.

- **Scan and output results to a file:**
  ```bash
  nmap -oN output.txt <target-ip>
  ```
  Saves the scan results to a file named `output.txt`.

---

## **2. Gobuster (Directory and File Enumeration)**
Gobuster helps find hidden directories and files on a web server.

### **Basic Commands**
- **Directory brute-forcing:**
  ```bash
  gobuster dir -u http://<target-ip> -w /usr/share/wordlists/dirb/common.txt
  ```
  - `-u`: Target URL.
  - `-w`: Wordlist to use (common.txt is often a good starting point).

- **Include extensions:**
  ```bash
  gobuster dir -u http://<target-ip> -w /usr/share/wordlists/dirb/common.txt -x php,txt,html
  ```
  Adds extensions to look for specific file types like `.php` or `.txt`.

---

## **3. Sqlmap (Automated SQL Injection)**
Sqlmap automates SQL injection attacks to extract data from databases.

### **Basic Commands**
- **Test a URL for SQL injection:**
  ```bash
  sqlmap -u "http://<target-ip>/vulnerable?param=value" --batch
  ```
  - `-u`: URL to test.
  - `--batch`: Automatically answers questions (useful in CTFs).

- **Get database names:**
  ```bash
  sqlmap -u "http://<target-ip>/vulnerable?param=value" --dbs
  ```

- **Dump data from a specific database:**
  ```bash
  sqlmap -u "http://<target-ip>/vulnerable?param=value" -D <database-name> --dump
  ```
  - `-D`: Target database name.
  - `--dump`: Extracts data.

---

## **4. Burp Suite (Web Application Testing)**
Burp Suite is a proxy tool for intercepting and modifying HTTP requests.

### **Key Features**
- **Intercept HTTP Requests:** Use Burp Proxy to capture and modify web traffic.
- **Repeater:** Replay and modify HTTP requests to test for vulnerabilities.
- **Decoder:** Decode/encode Base64, URL-encoded, and other formats.

---

## **5. CyberChef (Online Decoding and Encoding)**
CyberChef is a versatile tool for cryptography challenges.

### **Use Cases**
- **Base64 Decoding:**
  - Paste the Base64-encoded string into CyberChef and apply the "From Base64" operation.
  
- **ROT13 Decoding:**
  - Use the "ROT13" operation to decode text encoded with ROT13.

- **Hex to Text:**
  - Use the "From Hex" operation.

---

## **6. Netcat (nc)**
Netcat is a simple networking tool for sending and receiving data.

### **Basic Commands**
- **Check open ports manually:**
  ```bash
  nc -zv <target-ip> <port-range>
  ```
  - `-z`: Scan mode.
  - `-v`: Verbose output.

- **Connect to an open port:**
  ```bash
  nc <target-ip> <port>
  ```

---

## **7. Strings (Binary Data Analysis)**
Strings extracts readable text from binary files.

### **Basic Commands**
- **Extract strings from a file:**
  ```bash
  strings <file>
  ```
  - Useful for finding hidden hints or flags in binary files.

---

## **8. Steghide (Steganography)**
Steghide is used for extracting hidden data from images or files.

### **Basic Commands**
- **Extract data from an image:**
  ```bash
  steghide extract -sf <image-file>
  ```
  - `-sf`: Specifies the file containing hidden data.
  - Will prompt for a password if one is set.

---

## **9. Hashcat (Password Cracking)**
Hashcat is used for cracking password hashes.

### **Basic Commands**
- **Crack a hash with a wordlist:**
  ```bash
  hashcat -m 0 -a 0 <hash-file> /usr/share/wordlists/rockyou.txt
  ```
  - `-m 0`: MD5 hash type.
  - `-a 0`: Straight mode (dictionary attack).

---

## **10. Python for Quick Scripting**
Python is a powerful tool for solving small CTF challenges.

### **Useful Scripts**
- **ROT13 Decoder:**
  ```python
  import codecs
  print(codecs.encode('text', 'rot_13'))
  ```
- **Base64 Decoder:**
  ```python
  import base64
  print(base64.b64decode('SGVsbG8gd29ybGQ=').decode('utf-8'))
  ```

---

### **Workflow Summary**
1. **Start with Nmap** to discover open ports and running services.
2. **Use Gobuster** to find directories or files on web servers.
3. **Test web input fields** with manual payloads or tools like Sqlmap.
4. **Decode cryptographic challenges** using CyberChef or Python scripts.
5. **Use Burp Suite** to intercept and analyze HTTP requests.

Would you like me to help set up these tools or provide a more detailed walkthrough of one?
